#lang racket
;task 4
(define (isSimple num)
  (define (iter n counter)
    (cond
      [(= counter n)]
      [(= (remainder n counter) 0) #f]
      [else (iter n (+ counter 1))]))
  (iter num 2))

(define (isTwoSimple num1 num2)
  (and (isSimple num1) (isSimple num2)))

(define (findDivisor num startPoint)
  (define (iter n counter)
    (if (= (remainder n counter) 0) counter (iter n (+ counter 1))))
  (iter num startPoint))

(define (result num)
  (if (and (< (findDivisor num 2) num) (findDivisor num 2))
      (= (/ (/ num (findDivisor num 2)) (findDivisor (/ num (findDivisor num 2)) 2) 1))
      #f))

(result 13)
(result 22)
(result 121)
(result 5)
(result 49)
(result 6)
