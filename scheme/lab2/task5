#lang racket
(define (is-divide divided divider)
  (let* ((a (/ divided divider)) (b (/ divided a)))
    (if (= (remainder divided divider) 0)
        (+ a b) 0 )))

(define (is-perfect-number number)
  (define (iter sum n)
    (if (> number 1)
        (if (= n (ceiling (sqrt number)))
            (= sum number) (iter (+ sum (is-divide number n)) (+ n 1))) #f))
  (iter 1 2))

(is-perfect-number 6)
(is-perfect-number 5)