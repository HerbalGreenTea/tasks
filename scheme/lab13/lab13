#lang racket

;; task1

(define (calcDerivative polinom)
  (define (iter index derivative)
    (cond
      [(= (length polinom) index) (reverse derivative)]
      [(= index 0) (iter (+ 1 index) derivative)]
      [(= index 1) (iter (+ 1 index) (append derivative (list (list-ref polinom index))))]
      [else (iter (+ 1 index) (append derivative (list (* index (list-ref polinom index)))))]))
  (iter 0 '()))

(define (getDerivative polinom)
  (calcDerivative (reverse polinom)))

; (getDerivative '(1 1 1)) ; result fun

;; task2

(define (calcSumPolinoms polinom1 polinom2)
  (foldl (λ (arg1 arg2 sumP) (append sumP (list (+ arg1 arg2)))) '() polinom1 polinom2))

(define (getSumPolinoms p1 p2)
  (cond
    [(< (length p1) (length p2))
     (calcSumPolinoms p2 (append p1 (build-list (- (length p2) (length p1)) (lambda (x) 0))))]
    [(> (length p1) (length p2))
     (calcSumPolinoms p1 (append p2 (build-list (- (length p1) (length p2)) (lambda (x) 0))))]
    [else (calcSumPolinoms p1 p2)]))

; (getSumPolinoms '(0 0 0) '(1 1 1)) ; result fun

;; task3


(define (getCoefList power listC)
  (define powerList (build-list power (λ (x) (- power (+ x 1)))))
  (map (lambda (coef degree) (cons coef degree)) listC powerList))

(define (multDeg d1 d2)
  (define resC (* (car d1) (car d2)))
  (define resD (+ (cdr d1) (cdr d2)))
  (cons resC resD))
  
(define (multPolinims ListC1 ListC2)
  (define (iter cofList result)
    (define (iter2 degC degC2 result)
      (if (empty? degC2)
          result
          (iter2 degC (cdr degC2)
                      (cons (multDeg degC (car degC2)) result))))
    (if (empty? cofList)
        result
        (let ([resultBuild (iter2 (car cofList) (getCoefList (length ListC2) ListC2) result)])
          (iter (cdr cofList) resultBuild))))
  (define (bring poly deg)
    (define coef
      (foldl (λ (el res) (+ (car el) res)) 0 (filter (λ (el) (= (cdr el) deg)) (iter (getCoefList (length ListC1) ListC1) '()))))
    (if (= deg (- (+ (length ListC1) (length ListC2)) 2))
        (cons coef poly)
        (bring (cons coef poly) (+ deg 1))))
  (bring '() 0))

; (multPolinims '(1 2 3) '(4 5)) ; result fun

;; task4

(define (ch->num ch)
  (cond
    [(equal? ch #\0) 0]
    [(equal? ch #\1) 1]
    [(equal? ch #\2) 2]
    [(equal? ch #\3) 3]
    [(equal? ch #\4) 4]
    [(equal? ch #\5) 5]
    [(equal? ch #\6) 6]
    [(equal? ch #\7) 7]
    [(equal? ch #\8) 8]
    [else 9]))

(define (listDid num)
  (cond
    [(number? num) (foldl (λ (arg res) (append res (list(ch->num arg)))) '() (string->list(number->string num)))]
    [else num]))

(define (sumSystK didList1 didList2 k)
  (define (iter currMod index resList)
    (cond
      [(and (eq? index -1) (> currMod 0)) (append (list currMod) resList)]
      [(eq? index -1) resList]
      [else (iter
             (quotient (+ (list-ref didList1 index) (list-ref didList2 index) currMod) k)
             (- index 1)
             (append (list (remainder (+ (list-ref didList1 index) (list-ref didList2 index) currMod) k)) resList))]))
  (iter 0 (- (length didList1) 1) '()))

(define (getSumNumSysK num1 num2 k)
  (define p1 (listDid num1))
  (define p2 (listDid num2))
  (cond
    [(< (length p1) (length p2))
     (sumSystK p2 (append (build-list (- (length p2) (length p1)) (lambda (x) 0)) p1) k)]
    [(> (length p1) (length p2))
     (sumSystK p1 (append (build-list (- (length p1) (length p2)) (lambda (x) 0)) p2) k)]
    [else (sumSystK p1 p2 k)]))

(define (argsSum k arg1 . listArg)
  (foldl (λ (arg res) (getSumNumSysK arg res k)) arg1 listArg))

; (argsSum 2 1011 111 101) ; result fun


;; task5

(define (mthodHornera m x)
  (foldl (λ (k r) (+ k (* r x))) 0 m))

(define (p cList)
  (define powerList (cdr (build-list (length cList) (λ (x) (- (length cList) x)))))
  (define listCoef (take cList (- (length cList) 1)))
  (if (empty? listCoef) '(0) (map (λ (x y) (* x y)) powerList listCoef)))

(define (methodNewtona x polynom epsilon)
  (if (< (abs (mthodHornera polynom x)) epsilon)
      x
      (methodNewtona (- x (/ (mthodHornera polynom x) (mthodHornera (p polynom) x))) polynom epsilon)))

; (methodNewtona 1 '(1 -1) 0.111) ; result fun










